<?xml version="1.0" encoding="UTF-8"?>
<!-- 指定Spring配置文件的Schema信息 -->
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	http://www.springframework.org/schema/tx 
	http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
	http://www.springframework.org/schema/aop 
	http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">

	<!-- 定义数据源Bean，使用C3P0数据源实现 -->
	<!-- 设置连接数据库的驱动、URL、用户名、密码
		连接池最大连接数、最小连接数、初始连接数等参数 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close"
		p:driverClass="com.mysql.jdbc.Driver"
		p:jdbcUrl="jdbc:mysql://localhost:3306/cineplex"
		p:user="root"
		p:password="root"
		p:maxPoolSize="40"
		p:minPoolSize="1"
		p:initialPoolSize="1"
		p:maxIdleTime="20"/>

	<!-- 定义Hibernate的SessionFactory -->
	<!-- 依赖注入数据源，注入正是上面定义的dataSource -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate3.LocalSessionFactoryBean"
		p:dataSource-ref="dataSource">
		<!-- mappingResouces属性用来列出全部映射文件 -->
		<property name="mappingResources">
			<list>
				<!-- 以下用来列出Hibernate映射文件 -->
				<value>model/Answer.hbm.xml</value>
				<value>model/BankCard.hbm.xml</value>
				<value>model/Consumption.hbm.xml</value>
				<value>model/Manager.hbm.xml</value>
				<value>model/Member.hbm.xml</value>
				<value>model/Movie.hbm.xml</value>
				<value>model/MoviePlan.hbm.xml</value>
				<value>model/Payment.hbm.xml</value>
				<value>model/Question.hbm.xml</value>
				<value>model/Waiter.hbm.xml</value>
			</list>
		</property>
		<!-- 定义Hibernate的SessionFactory的属性 -->
		<property name="hibernateProperties">
			<!-- 指定数据库方言、是否自动建表
				是否生成SQL语句等 	-->
			<value>
			hibernate.dialect=org.hibernate.dialect.MySQLInnoDBDialect
			hibernate.hbm2ddl.auto=update
			hibernate.show_sql=true
			hibernate.format_sql=true
			#开启二级缓存
			hibernate.cache.use_second_level_cache=true
			#设置二级缓存的提供者
			hibernate.cache.provider_class=org.hibernate.cache.EhCacheProvider
			</value>
		</property>
	</bean>
	
	<!-- 定义DAO Bean -->
	<bean id="answerDao"
		class="dao.impl.AnswerDaoImpl">
		<property name="sessionFactory" ref="sessionFactory"/>
	</bean>
	<bean id="bankCardDao"
		class="dao.impl.BankCardDaoImpl">
		<property name="sessionFactory" ref="sessionFactory"/>
	</bean>
	<bean id="consumptionDao"
		class="dao.impl.ConsumptionDaoImpl">
		<property name="sessionFactory" ref="sessionFactory"/>
	</bean>
	<bean id="managerDao"
		class="dao.impl.ManagerDaoImpl">
		<property name="sessionFactory" ref="sessionFactory"/>
	</bean>
	<bean id="memberDao"
		class="dao.impl.MemberDaoImpl">
		<property name="sessionFactory" ref="sessionFactory"/>
	</bean>
	<bean id="movieDao"
		class="dao.impl.MovieDaoImpl">
		<property name="sessionFactory" ref="sessionFactory"/>
	</bean>
	<bean id="moviePlanDao"
		class="dao.impl.MoviePlanDaoImpl">
		<property name="sessionFactory" ref="sessionFactory"/>
	</bean>
	<bean id="paymentDao"
		class="dao.impl.PaymentDaoImpl">
		<property name="sessionFactory" ref="sessionFactory"/>
	</bean>
	<bean id="questionDao"
		class="dao.impl.QuestionDaoImpl">
		<property name="sessionFactory" ref="sessionFactory"/>
	</bean>
	<bean id="waiterDao"
		class="dao.impl.WaiterDaoImpl">
		<property name="sessionFactory" ref="sessionFactory"/>
	</bean>
	
	<!-- 配置一个业务逻辑组件 -->
	<bean id="memberService" class="service.impl.MemberServiceImpl">
		<!-- 注入持久化访问所需的DAO组件 -->
		<property name="answerDao" ref="answerDao"></property>
		<property name="bankCardDao" ref="bankCardDao"></property>
		<property name="consumptionDao" ref="consumptionDao"></property>
		<property name="managerDao" ref="managerDao"></property>
		<property name="memberDao" ref="memberDao"></property>
		<property name="movieDao" ref="movieDao"></property>
		<property name="paymentDao" ref="paymentDao"></property>
		<property name="questionDao" ref="questionDao"></property>
		<property name="waiterDao" ref="waiterDao"></property>
	</bean>
	<bean id="waiterService" class="service.impl.WaiterServiceImpl">
		<!-- 注入持久化访问所需的DAO组件 -->
		<property name="bankCardDao" ref="bankCardDao"></property>
		<property name="consumptionDao" ref="consumptionDao"></property>
		<property name="memberDao" ref="memberDao"></property>
		<property name="movieDao" ref="movieDao"></property>
		<property name="moviePlanDao" ref="moviePlanDao"></property>
		<property name="paymentDao" ref="paymentDao"></property>
		<property name="questionDao" ref="questionDao"></property>
		<property name="waiterDao" ref="waiterDao"></property>
	</bean>
	<bean id="managerService" class="service.impl.ManagerServiceImpl">
		<!-- 注入持久化访问所需的DAO组件 -->
		<property name="consumptionDao" ref="consumptionDao"></property>
		<property name="managerDao" ref="managerDao"></property>
		<property name="memberDao" ref="memberDao"></property>
		<property name="movieDao" ref="movieDao"></property>
		<property name="moviePlanDao" ref="moviePlanDao"></property>
		<property name="questionDao" ref="questionDao"></property>
		<property name="answerDao" ref="answerDao"></property>
	</bean>
	
	<!-- 配置Hibernate的局部事务管理器，使用HibernateTransactionManager类 -->
	<!-- 该类实现PlatformTransactionManager接口，是针对Hibernate的特定实现-->
	<!-- 并注入SessionFactory的引用 -->
	<bean id="transactionManager" class=
		"org.springframework.orm.hibernate3.HibernateTransactionManager"
		p:sessionFactory-ref="sessionFactory"/>
		
	<!-- Quartz配置 -->
	<!-- 定义触发器来管理任务bean -->
	<bean id="cronTriggerAuto" 
			class="org.springframework.scheduling.quartz.CronTriggerBean">
		<property name="jobDetail">
			<!-- 使用嵌套Bean的方式来定义任务bean -->
			<bean class="org.springframework.scheduling.quartz.JobDetailBean">
				<!-- 指定任务Bean的实现类 -->
				<property name="jobClass" value="service.impl.Auto" />
				<!-- 为任务Bean注入属性 -->
				<property name="jobDataAsMap">
					<map>
						<entry key="memberService" value-ref="memberService"/>
					</map>
				</property>
			</bean>
		</property>
		<!-- 指定Cron表达式：0 0 12 * * ? 每天中午十二点触发  -->
		<!--  0/5 * * * * ?  每5秒触发一次-->
		<property name="cronExpression" value="0 0 12 * * ?" />
	</bean>
	<!-- 执行实际的调度 -->
	<bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="triggers">
			<list>
				<ref local="cronTriggerAuto"/>
			</list>
		</property>
	</bean>

	<!-- 配置事务增强处理Bean,指定事务管理器 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<!-- 用于配置详细的事务语义 -->
		<tx:attributes>
			<!-- 所有以'get'开头的方法是read-only的 -->
			<tx:method name="get*" read-only="true"/>
			<!-- 其他方法使用默认的事务设置 -->
			<tx:method name="*"/>
		</tx:attributes>
	</tx:advice>
	<aop:config>
		<!-- 配置一个切入点，匹配memberService、waiterService和managerService
			三个Bean的所有方法的执行 -->
		<aop:pointcut id="beanPointcut"
			expression="bean(memberService)||bean(waiterService)||bean(managerService)"/>
		<!-- 指定在leePointcut切入点应用txAdvice事务增强处理 -->
		<aop:advisor advice-ref="txAdvice" 
			pointcut-ref="beanPointcut"/>
	</aop:config>
	
</beans>